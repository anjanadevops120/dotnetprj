https://www.terraform.io/

Terraform is an open-source, infrastructure as code, software tool created by HashiCorp that enables you to safely and predictably create, change, and improve infrastructure.. 

Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language, or optionally JSON.

we can manage infrastructure life cyle(Create,update,delete) using terraform.
we can reuse code with module.

Initial release: 28 July 2014;
-----------------------------------------------------------------------------------------------------
terraform version - Terraform v1.2.8

Add into terraform downoad path to system environment varibles

Edit system varibles -> advance ->system varibles -> path -> add -> ok
------------------------------------------------------------------------------------------------------

Setup az CLI -https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli

az login

terraform init
terraform plan
terraform apply 

------------------------------------------

terraform init

 -In order to prepare the working directory for use with Terraform, the terraform init command performs Backend Initialization, Child Module Installation, and Plugin Installation.

terraform validate 

- Validates the configuration files in your directory, and does not access any remote state or services. terraform init should be run before this command.

terraform plan 

-Plan will generate an execution plan, showing you what actions will be taken without actually performing the planned actions.

terraform apply 

— Creates or updates infrastructure depending on the configuration files. By default, a plan will be generated first and will need to be approved before it is applied.

terraform apply -auto-approve 

— Apply changes without having to interactively type ‘yes’ to the plan. Useful in automation CI/CD pipelines.

terraform fmt — Format your Terraform configuration files using the HCL language standard.

---------------------------------------------------------------------------------------
Destroy Your Infrastructure:

terraform destroy — Destroys the infrastructure managed by Terraform.

terraform destroy -target=”module.appgw.0" — Destroy only the targeted resource.

terraform destroy -auto-approve — Destroys the infrastructure without having to interactively type ‘yes’ to the plan. Useful in automation CI/CD pipelines.
-----------------------------------------------------------------------------------------
‘Taint’ or ‘Untaint’ Your Resources

Use the taint command to mark a resource as not fully functional. It will be deleted and re-created.

terraform taint vm1.name — Taint a specified resource instance.

terraform untaint vm1.name — Untaint the already tainted resource instance.

---------------------------------------------------------------------------------------

Refresh the State File

terraform refresh — Modifies the state file with updated metadata containing information on the resources being managed in Terraform. Will not modify your infrastructure.

View Your State File
terraform show — Shows the state file in a human-readable format.

terraform show <path to statefile> — If you want to read a specific state file, you can provide the path to it. If no path is provided, the current state file is shown.
---------------------------------------------------------------
Manipulate Your State File

terraform state — One of the following subcommands must be used with this command in order to manipulate the state file.

terraform state list — Lists out all the resources that are tracked in the current state file.

terraform state mv — Moves an item in the state, for example, this is useful when you need to tell Terraform that an item has been renamed, e.g. terraform state mv vm1.oldname vm1.newname

terraform state pull > state.tfstate — Gets the current state and outputs it to a local file.

terraform state push — Update remote state from the local state file.

terraform state replace-provider hashicorp/azurerm customproviderregistry/azurerm — Replace a provider, useful when switching to using a custom provider registry.

terraform state rm — Remove the specified instance from the state file. Useful when a resource has been manually deleted outside of Terraform.

terraform state show <resourcename> — Show the specified resource in the state file.
-------------------------------------------------------------------------------------
